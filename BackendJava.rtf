{\rtf1\ansi\ansicpg1252\cocoartf2513
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 // Backend (Node.js/Express)\
const express = require('express');\
const mongoose = require('mongoose');\
const bcrypt = require('bcrypt');\
const jwt = require('jsonwebtoken');\
const multer = require('multer');\
\
const app = express();\
mongoose.connect('mongodb://localhost/tiktok-clone');\
\
// User Schema\
const userSchema = new mongoose.Schema(\{\
    username: String,\
    password: String,\
    avatar: String\
\});\
\
// Video Schema\
const videoSchema = new mongoose.Schema(\{\
    url: String,\
    caption: String,\
    userId: mongoose.ObjectId,\
    likes: [mongoose.ObjectId],\
    comments: [\{\
        userId: mongoose.ObjectId,\
        text: String\
    \}],\
    createdAt: Date\
\});\
\
// Auth Middleware\
const authenticate = (req, res, next) => \{\
    const token = req.headers.authorization;\
    jwt.verify(token, 'SECRET_KEY', (err, user) => \{\
        if (err) return res.status(403).send();\
        req.user = user;\
        next();\
    \});\
\};\
\
// Routes\
app.post('/api/register', async (req, res) => \{\
    const hashedPassword = await bcrypt.hash(req.body.password, 10);\
    const user = new User(\{ ...req.body, password: hashedPassword \});\
    await user.save();\
    res.send(\{ user \});\
\});\
\
app.post('/api/login', async (req, res) => \{\
    const user = await User.findOne(\{ username: req.body.username \});\
    if (await bcrypt.compare(req.body.password, user.password)) \{\
        const token = jwt.sign(\{ id: user._id \}, 'SECRET_KEY');\
        res.send(\{ token \});\
    \}\
\});\
\
app.post('/api/videos', authenticate, upload.single('video'), async (req, res) => \{\
    const video = new Video(\{\
        url: await uploadToCloudStorage(req.file),\
        caption: req.body.caption,\
        userId: req.user.id\
    \});\
    await video.save();\
    res.send(\{ video \});\
\});\
\
app.get('/api/videos', async (req, res) => \{\
    const videos = await Video.find().populate('user');\
    res.send(\{ videos \});\
\});}